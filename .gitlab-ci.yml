stages:
    - unit_test
    - integrate_test
    - e2e_test

# cache:
#   paths:
#     - .pip
#
# before_script:
#   - mkdir -p .pip
#   - pip install -U pip
#   - pip --cache-dir=.pip install -r tests_requires.txt

services:
  - postgres

variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    POSTGRES_DB: testing_database
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "rocketman1"
    POSTGRES_HOST_AUTH_METHOD: trust

cache:
    paths:
        - .cache/pip

before_script:
    #- apt-get install -y postgresql postgresql-client libpq-dev
    #- pip3 install -r requirements.txt
    #- export PYTHONPATH="$PYTHONPATH:./swagger_server"
    #- python -c "import sys;print(sys.path)"
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - apt-get install -y postgresql postgresql-client libpq-dev
    - psql -c "CREATE DATABASE test_db;" -U postgres
    - psql -c "create table test (id_people INT PRIMARY KEY NOT NULL,
                      name TEXT NOT NULL,
                      face BYTEA NOT NULL);"
    - psql -c "select * from test;"
    #- psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

unit-test-jwt:
    stage: unit_test
    tags:
        - docker
    image: orgoro/dlib-opencv-python
    only:
        - web
    script:
        - pytest -v swagger_server/tests/test_jwt.py
        
#unit-test-modules:
#    stage: unit_test
#    tags:
#        - docker
#    image: orgoro/dlib-opencv-python
#    only:
#        - web
#    script:
#        - pytest -v swagger_server/tests/test_module.py
#        
#unit-test-data:
#    stage: unit_test
#    tags:
#        - docker
#    image: orgoro/dlib-opencv-python
#    only:
#        - web
#    script:
#        - pytest -v swagger_server/tests/test_data_access.py

integrate-test-mocking:
    stage: integrate_test
    tags:
        - docker
    image: orgoro/dlib-opencv-python
    only:
        - web
    script:
        #- pytest swagger_server/tests/test_int_mocking.py
        - pytest -v swagger_server/tests/test_jwt.py
        
integrate-test-no-mocking:
    stage: integrate_test
    tags:
        - docker
    image: orgoro/dlib-opencv-python
    only:
        - web
    script:
        #- pytest -v swagger_server/tests/test_int_no_mocking.py
        - pytest -v swagger_server/tests/test_jwt.py
        
e2e-test:
    stage: e2e_test
    tags:
        - docker
    image: orgoro/dlib-opencv-python
    only:
        - web
    script:
        #- pytest -v swagger_server/tests/test_e2e.py
        - pytest -v swagger_server/tests/test_jwt.py
